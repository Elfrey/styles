@function em($target, $context: $base-font-size) {
  @if $target == 0 {
    @return 0
  }
  @return $target / $context + 0em;
}

@function retina-filename($filename, $extention: '.png') {
  @return $filename + '@2x' + $extention;
}

@mixin background-image-2x($filename, $width, $height, $extention: '.png') {
  background-repeat: no-repeat;
  @include background-image(image-url($filename + $extention));
  @include background-size($width $height);
  @media (-webkit-min-device-pixel-ratio: 1.3),
  (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @include background-image(image-url(retina-filename($filename, $extention)));
  }
}

@mixin retina-image {
  @media (-webkit-min-device-pixel-ratio: 1.3),
  (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @content
  }
}


@mixin v-gradient($start-color, $end-color, $orientation: vertical) {
  $experimental-support-for-svg: true;
  @if $orientation == vertical {
    @include background-image(linear-gradient($start-color, $end-color));
  } @else {
    @include background-image(linear-gradient($orientation, $start-color, $end-color));
  }
  .oldie & {
    @include filter-gradient($start-color, $end-color, $orientation);
  }
}

@mixin custom-animate($name, $time:1s, $algor:linear, $delay:"", $loop:infinite,$fill:"") {
  -webkit-animation: #{$name} $time $algor #{$delay} $loop #{$fill};
  -moz-animation: #{$name} $time $algor #{$delay} $loop #{$fill};
  -ms-animation: #{$name} $time $algor #{$delay} $loop #{$fill};
  animation: #{$name} $time $algor #{$delay} $loop #{$fill};
}

//Responsive mixins
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
  table#{$parent} {
    display: table;
  }
  tr#{$parent} {
    display: table-row !important;
  }
  th#{$parent},
  td#{$parent} {
    display: table-cell !important;
  }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}


@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 12%);
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: $background;
      border-color: $border;
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}

// Button sizes
@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
  border-radius: $border-radius;
}

@mixin tab-focus() {
  // Default
  outline: thin dotted;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}